Принципы SOLID и их применение:
1. Single Responsibility Principle (SRP): Каждый класс должен иметь одну ответственность.
2. Open/Closed Principle (OCP): Классы должны быть открыты для расширения, но закрыты для
модификации.
3. Liskov Substitution Principle (LSP): Объекты должны быть заменяемы их подтипами без
изменения правильности программы.
4. Interface Segregation Principle (ISP): Клиенты не должны зависеть от интерфейсов,
которые они не используют.
5. Dependency Inversion Principle (DIP): Зависимости должны быть инвертированы,
т.е. модули высшего уровня не должны зависеть от модулей низшего уровня, а
обе группы должны зависеть от абстракций.

Протокол действий при выполнении ДЗ и комментарии:

1-й принцип:

Student, Teacher, Stream, StudentGroup - эти классы имеют одну ответственность.

2-й принцип:

Class User - этот класс открыт для расширения, но закрыт для модификации.

3-й принцип:

Реализации данного принципа не нашел, если она есть, прошу меня исправить.

4-й принцип:

Interface UserController --> Interface UserCreateController - изменено название
интерфейса, применен принцип разделения интерфейсов. Каждый клиент реализует
метод создания пользователя по-своему.

Interface UserView - применен принцип разделения интерфейсов.
Каждый клиент реализует метод вывода в консоль по-своему.

5-й принцип:

На примере Class User видно, как классы Teacher и Student зависят
от абстрактного класса.

Interface UserController --> Interface UserCreateController - изменено название
интерфейса. Каждый расширяемый класс реализует абстрактный метод из этого
интерфейса.

Interface UserView - применен принцип разделения интерфейсов.
Каждый расширяемый класс реализует абстрактный метод из этого интерфейса.